name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Frontend CI
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-frontend-node-${{ hashFiles('./frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-node-

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Format check
        run: npm run format:check
        
      - name: Lint check (currently disabled)
        run: |
          echo "Frontend linting is currently disabled due to ESLint config issues"
          echo "TODO: Fix ESLint configuration and re-enable: npm run lint"

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:3001' }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/dist
          retention-days: 7

  # Job 2: Backend CI
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ./backend/node_modules
          key: ${{ runner.os }}-backend-node-${{ hashFiles('./backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-node-

      - name: Install dependencies
        run: npm ci

      - name: Lint check
        run: npm run lint

      - name: Format check
        run: npx prettier --check "**/*.js"

      - name: Start server (health check)
        run: |
          # Start server in background
          npm start &
          SERVER_PID=$!
          
          # Wait for server to start
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
              echo "Server is running!"
              kill $SERVER_PID
              exit 0
            fi
            echo "Attempt $i: Server not ready yet..."
            sleep 2
          done
          
          echo "Server failed to start within 60 seconds"
          kill $SERVER_PID 2>/dev/null || true
          exit 1
        env:
          PORT: 3001
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          NODE_ENV: test

      # Placeholder for future tests
      - name: Run tests
        run: |
          echo "No tests configured yet - skipping test execution"
          echo "TODO: Add 'npm test' when test suite is implemented"
        env:
          PORT: 3001
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          NODE_ENV: test

  # Job 3: Security and Dependency Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Audit frontend dependencies
        run: |
          cd frontend
          npm audit --audit-level=high

      - name: Audit backend dependencies
        run: |
          cd backend
          npm audit --audit-level=high

  # Job 4: Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [frontend, backend, security]
    if: always()
    
    steps:
      - name: Check build status
        run: |
          echo "Frontend Status: ${{ needs.frontend.result }}"
          echo "Backend Status: ${{ needs.backend.result }}"
          echo "Security Status: ${{ needs.security.result }}"
          
          if [[ "${{ needs.frontend.result }}" != "success" || "${{ needs.backend.result }}" != "success" || "${{ needs.security.result }}" != "success" ]]; then
            echo "❌ Build failed!"
            exit 1
          else
            echo "✅ All checks passed!"
          fi 