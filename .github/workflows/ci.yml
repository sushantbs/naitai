name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "22"

jobs:
  # Job 1: Frontend CI
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-frontend-node-${{ hashFiles('./frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-node-

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Format check
        run: npm run format:check

      - name: Lint check (currently disabled)
        run: |
          echo "Frontend linting is currently disabled due to ESLint config issues"
          echo "TODO: Fix ESLint configuration and re-enable: npm run lint"

      - name: Run tests
        run: npm test
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:3001' }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:3001' }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./frontend/dist
          retention-days: 7

  # Job 2: Backend CI
  backend:
    name: Backend CI
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ./backend/node_modules
          key: ${{ runner.os }}-backend-node-${{ hashFiles('./backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-node-

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint check
        run: npm run lint

      - name: Format check
        run: npx prettier --check "**/*.{js,ts}"

      - name: Build TypeScript
        run: npm run build

      - name: Run tests
        run: npm test
        env:
          PORT: 3003
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          NODE_ENV: test

      - name: Start server (health check)
        run: |
          # Start server in background
          npm start &
          SERVER_PID=$!

          # Wait for server to start
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
              echo "Server is running!"
              kill $SERVER_PID
              exit 0
            fi
            echo "Attempt $i: Server not ready yet..."
            sleep 2
          done

          echo "Server failed to start within 60 seconds"
          kill $SERVER_PID 2>/dev/null || true
          exit 1
        env:
          PORT: 3001
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          NODE_ENV: test

      # Additional integration tests (if needed)
      - name: Run additional tests
        run: |
          echo "Additional integration tests can be added here"
          echo "Current test suite covers API endpoints and functionality"
        env:
          PORT: 3001
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          NODE_ENV: test

  # Job 3: Security and Dependency Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Audit frontend dependencies
        run: |
          cd frontend
          npm audit --audit-level=high

      - name: Audit backend dependencies
        run: |
          cd backend
          npm audit --audit-level=high

  # Job 4: Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [frontend, backend, security]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "Frontend Status: ${{ needs.frontend.result }}"
          echo "Backend Status: ${{ needs.backend.result }}"
          echo "Security Status: ${{ needs.security.result }}"

          if [[ "${{ needs.frontend.result }}" != "success" || "${{ needs.backend.result }}" != "success" || "${{ needs.security.result }}" != "success" ]]; then
            echo "❌ Build failed!"
            exit 1
          else
            echo "✅ All checks passed!"
          fi

  # Job 5: Deploy Frontend to Vercel
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [frontend, backend, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL_PROD }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: "--prod"
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
          working-directory: ./frontend
          scope: ${{ secrets.VERCEL_ORG_ID }}
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL_PROD }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

  # Job 6: Deploy Backend to Vercel
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [frontend, backend, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./backend/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: "--prod"
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
          working-directory: ./backend
          scope: ${{ secrets.VERCEL_ORG_ID }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          NODE_ENV: production

  # Job 7: End-to-End Verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Wait for deployment propagation
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30

      - name: Test Backend Health
        run: |
          echo "Testing backend health endpoint..."
          backend_url="${{ secrets.VERCEL_BACKEND_URL }}"
          if [ -z "$backend_url" ]; then
            echo "⚠️  VERCEL_BACKEND_URL not set, skipping backend verification"
          else
            for i in {1..10}; do
              if curl -f "${backend_url}/api/health" > /dev/null 2>&1; then
                echo "✅ Backend health check passed!"
                break
              else
                echo "Attempt $i: Backend not ready yet..."
                sleep 10
              fi
            done
          fi

      - name: Test Backend API
        run: |
          echo "Testing backend API endpoints..."
          backend_url="${{ secrets.VERCEL_BACKEND_URL }}"
          if [ -z "$backend_url" ]; then
            echo "⚠️  VERCEL_BACKEND_URL not set, skipping API verification"
          else
            # Test GET /api/habits
            if curl -f "${backend_url}/api/habits" > /dev/null 2>&1; then
              echo "✅ GET /api/habits endpoint working!"
            else
              echo "❌ GET /api/habits endpoint failed!"
              exit 1
            fi
          fi

      - name: Test Frontend
        run: |
          echo "Testing frontend application..."
          frontend_url="${{ secrets.VERCEL_FRONTEND_URL }}"
          if [ -z "$frontend_url" ]; then
            echo "⚠️  VERCEL_FRONTEND_URL not set, skipping frontend verification"
          else
            # Test that frontend loads
            if curl -f "${frontend_url}" > /dev/null 2>&1; then
              echo "✅ Frontend application loads successfully!"
            else
              echo "❌ Frontend application failed to load!"
              exit 1
            fi
          fi

      - name: Deployment Summary
        run: |
          echo "🚀 Deployment Summary:"
          echo "Frontend URL: ${{ secrets.VERCEL_FRONTEND_URL }}"
          echo "Backend URL: ${{ secrets.VERCEL_BACKEND_URL }}"
          echo "✅ End-to-end deployment verification completed!"
